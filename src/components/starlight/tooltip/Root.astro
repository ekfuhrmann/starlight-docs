---
interface Props {
  /**
  A unique identifier for the tooltip to bind
  the trigger and the content together
  */
  uuid: string
}

const { uuid } = Astro.props
---

<custom-tooltip class="not-content" uuid={uuid}><slot /></custom-tooltip>

<script>
  import {
    computePosition,
    flip,
    shift,
    offset,
    arrow,
    autoUpdate,
  } from '@floating-ui/dom'

  class Tooltip extends HTMLElement {
    constructor() {
      super()

      this.isVisible = false
      this.cleanup = autoUpdate(this.trigger, this.content, this.create)
    }

    connectedCallback() {
      ;[
        ['click', this.toggle],
        ['blur', this.hide],
      ].forEach(([event, listener]) => {
        this.trigger.addEventListener(event, listener)
      })
    }

    disconnectedCallback() {
      ;[
        ['click', this.toggle],
        ['blur', this.hide],
      ].forEach(([event, listener]) => {
        this.trigger.removeEventListener(event, listener)
      })
    }

    private create = () => {
      computePosition(this.trigger, this.content, {
        placement: 'bottom',
        middleware: [
          offset(6),
          flip(),
          shift({ padding: 6 }),
          arrow({ element: this.arrow }),
        ],
      }).then(({ x, y, placement, middlewareData }) => {
        Object.assign(this.content.style, {
          left: `${x}px`,
          top: `${y}px`,
        })

        // Accessing the data
        const { x: arrowX, y: arrowY } = middlewareData.arrow

        const staticSide = {
          top: 'bottom',
          right: 'left',
          bottom: 'top',
          left: 'right',
        }[placement.split('-')[0]]

        Object.assign(this.arrow.style, {
          left: arrowX != null ? `${arrowX}px` : '',
          top: arrowY != null ? `${arrowY}px` : '',
          right: '',
          bottom: '',
          [staticSide]: '-4px',
        })
      })
    }

    private show = () => {
      this.content.style.display = 'block'

      this.create()
    }

    private hide = () => {
      this.content.style.display = 'none'

      this.cleanup
    }

    private toggle = () => {
      this.isVisible = !this.isVisible
      this.isVisible ? this.hide() : this.show()
    }

    private get trigger() {
      return this.querySelector('[data-tooltip-trigger]')
    }

    private get content() {
      return this.querySelector('[data-tooltip-content]')
    }

    private get arrow() {
      return this.querySelector('[data-tooltip-arrow]')
    }
  }

  customElements.define('custom-tooltip', Tooltip)
</script>
