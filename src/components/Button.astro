---
import type { HTMLTag, Polymorphic } from 'astro/types'

type Props<Tag extends HTMLTag> = Polymorphic<{
  /**
    The HTML tag to render for the component. By default the component will render as a `button` unless `href` is defined, at which point it will render as an `a`.
  */
  as: Tag
  /**
    The variant the button will take. Corresponds to the design system.
  */
  variant?: 'contained' | 'outlined' | 'subtle' | 'text'
  /**
    The size of the button. Corresponds to the design system.
  */
  size?: 'sm' | 'md' | 'lg'
  /**
    Whether the button should be an icon only button or not. If `true`, the button will omit the text, become a 1:1 aspect ratio, and only display the icon.
  */
  icon?: boolean
  /**
    The URL to link to. Passing in a value will cause the element to render as an anchor.
  */
  href?: string
  /**
    Button type (if applicable). Do not add a type if `href` is set.
  */
  type?: 'button' | 'submit' | undefined
  /**
    Whether the button is disabled or not.
  */
  disabled?: boolean
}>

const {
  as: Tag,
  variant = 'contained',
  size = 'md',
  icon = false,
  href = undefined,
  type = href ? undefined : 'button',
  disabled = false,
  class: className,
  ...props
} = Astro.props

const Element = Tag ? Tag : href && !disabled ? 'a' : 'button'
---

<Element
  href={!disabled ? href : undefined}
  disabled={disabled}
  type={type}
  class:list={[
    {
      'btn-contained': variant === 'contained',
      'btn-outlined': variant === 'outlined',
      'btn-subtle': variant === 'subtle',
      'btn-text': variant === 'text',
      'btn-icon': icon,
      'btn-sm': size === 'sm',
      'btn-lg': size === 'lg',
    },
    className,
  ]}
  data-component="Button"
  {...props}
>
  <slot />
</Element>
