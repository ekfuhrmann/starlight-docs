---
import type { HTMLAttributes } from 'astro/types'
import Button from '@/components/elements/Button.astro'
import close from '@/assets/svg/close.svg?raw'

interface Props extends HTMLAttributes<'dialog'> {
  /*
    Whether or not the close button should be hidden.
  */
  hideClose?: boolean
}

const { hideClose = false, class: className, ...attrs } = Astro.props
---

<custom-dialog-old>
  <dialog data-dialog="dialog" class="dialog" {...attrs}>
    {
      !hideClose && (
        <Button
          icon
          size="sm"
          title="Close"
          variant="subtle"
          class="absolute right-4 top-4 size-24 !min-h-0 [&_svg]:size-12"
          data-dialog="close"
        >
          <Fragment set:html={close} />
          Close
        </Button>
      )
    }

    <div
      class:list={[
        {
          'bg-white p-24 text-black dark:border dark:border-gray-500 dark:bg-gray-900 dark:text-white':
            !className,
        },
        className,
      ]}
    >
      <slot>
        <div class="flex items-center">
          No content has been provided for this dialog.
        </div>
      </slot>
    </div>
  </dialog>

  <slot name="trigger">
    <Button data-dialog="trigger">Open Dialog</Button>
  </slot>
</custom-dialog-old>

<script>
  class CustomDialog extends HTMLElement {
    constructor() {
      super()
    }

    connectedCallback() {
      this.dialogTrigger.addEventListener(
        'click',
        this.handleDialogTriggerClick,
      )
      this.dialog.addEventListener('click', this.handleDialogClick)
      this.dialogCloses?.forEach((dialogClose: Element) => {
        dialogClose.addEventListener('click', this.handleDialogCloseClick)
      })
      this.dialogForm?.addEventListener('submit', this.handleDialogFormSubmit)
    }

    disconnectedCallback() {
      this.dialogTrigger.removeEventListener(
        'click',
        this.handleDialogTriggerClick,
      )
      this.dialog.removeEventListener('click', this.handleDialogClick)
      this.dialogCloses?.forEach((dialogClose: Element) => {
        dialogClose.removeEventListener('click', this.handleDialogCloseClick)
      })
      this.dialogForm?.removeEventListener(
        'submit',
        this.handleDialogFormSubmit,
      )
    }

    private static readonly DELAY_TIME = 300

    private get dialogTrigger(): HTMLButtonElement {
      return this.querySelector('[data-dialog="trigger"]')!
    }

    private get dialog(): HTMLDialogElement {
      return this.querySelector('[data-dialog="dialog"]')!
    }

    private get dialogCloses(): NodeListOf<Element> {
      return this.querySelectorAll('[data-dialog="close"]')
    }

    private get dialogForm(): HTMLFormElement | null {
      return this.querySelector('form')
    }

    // Open the dialog when the user clicks the trigger
    private handleDialogTriggerClick = () => {
      if ('dialogStatus' in this.dialog.dataset) return

      this.dialog.dataset.dialogStatus = 'opening'

      setTimeout(() => {
        delete this.dialog.dataset.dialogStatus
      }, CustomDialog.DELAY_TIME)
      this.dialog.showModal()
    }

    // Close the dialog when the user clicks backdrop
    private handleDialogClick = (event: Event) => {
      if ('dialogStatus' in this.dialog.dataset) return

      if (event.target === this.dialog) this.handleDialogClose()
    }

    // Close the dialog when the user clicks a close button
    private handleDialogCloseClick = (event: Event) => {
      event.preventDefault()

      this.handleDialogClose()
    }

    // Close the dialog when the form is submitted and valid
    private handleDialogFormSubmit = (event: Event) => {
      event.preventDefault()

      if (this.dialogForm?.checkValidity()) this.handleDialogClose()
    }

    // Close the dialog with delay for animation
    private handleDialogClose() {
      this.dialog.dataset.dialogStatus = 'closing'
      setTimeout(() => {
        delete this.dialog.dataset.dialogStatus
        this.dialog.close()
      }, CustomDialog.DELAY_TIME)
    }
  }

  customElements.define('custom-dialog-old', CustomDialog)
</script>
